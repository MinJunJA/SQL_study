#데이터베이스 생성

create database haksa;

use haksa;

create table 학과
(
    번호 int not null,
    이름 varchar(30) not null,
    primary key (번호)
);

create table 교수
(
    번호 int not null primary key,
    이름 varchar(30) not null,
    학과번호 int not null,
    foreign key (학과번호) references 학과(번호)
);

create table 학생
(
    번호 int not null,
    이름 varchar(30) not null,
    주소 varchar(100),
    학년 int,
    키 int,
    몸무게 int,
    상태 char(4),
    입력일자 datetime,
    학과번호 int not null,
    primary key (번호),
    foreign key (학과번호) references 학과(번호)
);

create table 과목
(
    번호 int not null,
    이름 varchar(30) not null,
    학점 int,
    교수번호 int not null,
    primary key (번호),
    foreign key (교수번호) references 교수(번호)
);

create table 수강내역
(
    학생번호 int not null,
    과목번호 int not null,
    점수 decimal(4,1),
    등급 char(1),
    primary key (학생번호,과목번호),
    foreign key (학생번호) references 학생(번호),
    foreign key (과목번호) references 과목(번호)
);

insert into 학과(번호, 이름)
values (1,'소프트웨어공학과'),
       (2,'컴퓨터공학과'),
       (3,'경영정보학과'),
       (4,'경영학과'),
       (5,'연극영화과'),
       (6,'철학과');

insert into 교수(번호,이름,학과번호)
values (1,'이해진',1),
       (2,'김정주',1),
       (3,'김이숙',1),
       (4,'이석호',2),
       (5,'김사부',3),
       (6,'장미희',5),
       (7,'백남영',5),
       (8,'김현이',5),
       (9,'이사부',5);

insert into 과목
values (1,'데이터베이스관리',3,3);

insert into 과목
values (2,'데이터베이스프로그래밍',3,3),
       (3,'SQL활용',3,4),
       (4,'데이터베이스',4,5),
       (5,'인터넷마케팅',3,5),
       (6,'연기실습',2,7),
       (7,'영화제작실습',2,8),
       (8,'영화마케팅',1,9);

insert into 학생
values (1,'김이향','인천 남동구',4,166,56,'재학','2005-03-01',5);

insert into 학생 (번호,이름,주소,학년,키,상태,입력일자,학과번호) values (2,'박보검','인천 부평구',4,168,'재학','2010-03-01',6);
insert into 학생 (번호,이름,주소,학년,상태,입력일자,학과번호) values (3,'이세영','서울 구로구',4,'재학','2013-03-01',4);
insert into 학생 (번호,이름,주소,학년,상태,입력일자,학과번호) values (4,'문주원','경기 부천시',3,'재학','2014-02-13',3);
insert into 학생 (번호,이름,주소,학년,상태,입력일자,학과번호) values (5,'성춘향','서울 영등포구',3,'재학','2014-02-13',5);
insert into 학생 (번호,이름,주소,학년,키,몸무게,상태,입력일자,학과번호) values (6,'박지은','서울 양천구',2,183,65,'재학','2015-02-14',3);
insert into 학생 (번호,이름,주소,학년,키,몸무게,상태,입력일자,학과번호) values (7,'안칠현','서울 금천구',1,178,65,'재학','2016-02-19',1);
insert into 학생 (번호,이름,주소,학년,키,몸무게,상태,입력일자,학과번호) values (8,'김태희','서울 구로구',1,165,45,'재학','2016-02-19',3);
insert into 학생 (번호,이름,주소,학년,키,몸무게,상태,입력일자,학과번호) values (9,'채영','서울 구로구',1,172,47,'재학','2015-02-19',2);
insert into 학생 (번호,이름,학년,키,몸무게,상태,입력일자,학과번호) values (10,'박수애',1,168,46,'재학','2016-02-19',2);
insert into 학생 (번호, 이름, 주소, 학년, 키, 몸무게, 상태, 입력일자, 학과번호) values (11,'영란','서울 강남구', 1,162,43,'재학','2016-02-19',5);
insert into 학생 values (12,'윤호','서울 강남구',1,184,66,'휴학','2016-08-10',1),
                      (13,'보아','서울 구로구',1,162,45,'재학','2016-02-19',1),
                      (14,'문근영','서울 강남구',1,165,45,'재학','2016-02-19',3);

insert into 수강내역
values (7,1,84.5,'B'),
       (12,1,50,'F'),
       (13,1,90,'A'),
       (7,2,80,'B'),
       (13,2,94.5,'A'),
       (9,3,90,'A'),
       (10,3,70,'C'),
       (4,4,90,'A'),
       (6,4,55,'F'),
       (8,4,85,'B'),
       (14,4,95,'A'),
       (4,5,70,'C'),
       (6,5,95,'A'),
       (8,5,90,'A'),
       (14,5,95,'A'),
       (6,8,90,'A'),
       (8,8,80,'B'),
       (14,8,90,'A'),
       (1,6,85,'B'),
       (5,6,80,'B'),
       (11,6,78.5,'C'),
       (1,7,95,'A'),
       (5,7,85,'B'),
       (1,8,100,'A');

select *
from 수강내역;

#학생 테이블의 모든 열을 검색하라. 단, 반드시 와일드카드를 사용한다.

select *
from 학생;

#학생 테이블의 이름,학년,주소 열만 선택적으로 검색하라.

select 이름,학년,주소
from 학생;

#학생 테이블의 이름과 주소 열만 검색하라. 단, 이름 열은 화면에 성명으로 표시하고 주소 열은 현재 주소지로 표시한다.

select 이름 as 성명, 주소 as 현재_주소지
from 학생;

#학생 테이블의 학년 열을 검색하라. 단, 중복되는 행은 딱 한 번만 출력한다.
select distinct 학년
from 학생
order by 학년;

#학생 번호가 1인 학생을 검색하라.
select *
from 학생
where 번호 = 1;

#키가 165 미만인 학생을 검색하라.
select *
from 학생
where 키 < 165;

#1학년이고 동시에 키가 170 이상인 학생의 이름,학년,키,몸무게 열을 검색하라.
select 이름,학년,키,몸무게
from 학생
where 학년 = 1
and 키 >= 170;

#1학년이거나 또는 키가 170 이상인 학생의 이름,학년,키,몸무게 열을 검색하라.
select 이름,학년,키,몸무게
from 학생
where 학년 = 1
or 키 >= 170;

#몸무게 45보다 크거나 같고 50보다 작거나 같은 학생의 이름,주소,키,몸무게열을 검색하되, between 키워드를 사용하라.
select 이름,주소,키,몸무게
from 학생
where 몸무게 between 45 and 50;

#몸무게 45보다 크거나 같고 50보다 작거나 같은 학생의 이름,주소,키,몸무게 열을 검색하되, and 연산자를 사용하라.
select 이름,주소,키,몸무게
from 학생
where 몸무게 >= 45
and 몸무게 <= 50;

#학생의 번호,이름,학년열을 검색하라. 단, 검색결과에는 2학년과 3학년만 포함되어야하며, 반드시 IN 연산자를 사용하여야 한다.
select 번호,이름,학년
from 학생
where 학년 in (2,3);

#학생의 번호, 이름, 학년열을 검색하라. 단, 검색 결과에는 2학년과 3학년만 포함되어야하며, 반드시 or연산자를 사용하여야 한다.
select 번호,이름,학년
from 학생
where 학년 = 2
or 학년 = 3;

#박씨 성을 가진 학생의 모든 열을 검색하라.
select *
from 학생
where 이름 like '%박%';

#김씨, 이씨, 박씨 성을 가진 학생 모두를 검색하되, 반드시 like 연산자를 사용하라.
select *
from 학생
where 이름 like '%박%'
or 이름 like '%김%'
or 이름 like '%이%';

#김씨,이씨,박씨 성을 가진 학생 모두를 검색하되, 반드시 union을 사용하라.
SELECT * FROM 학생 WHERE 이름 LIKE '김%'
UNION
SELECT * FROM 학생 WHERE 이름 LIKE '이%'
UNION
SELECT * FROM 학생 WHERE 이름 LIKE '박%';

#주소 데이터가 없는 학생의 이름,학년,주소를 검색하라

select 이름,학년,주소
from 학생
where 주소 is null;

#몸무게 데이터가 있는 학생의 이름,학년,몸무게를 검색하라
select 이름,학년,몸무게
from 학생
where 몸무게 is not null;

#학생 테이블에서 모든 열에 저장된 데이터를 검색하되, 이름 가나다순으로 정렬하여 출력하라.
select *
from 학생
order by 이름;

#학생의 이름,주소,키 데이터를 검색하되, 키가 큰 학생부터 출력하라.
select 이름,주소,키
from 학생
order by 키 desc;

#1학년 학생의 이름,학년,주소,몸무게 데이터를 검색하라 단, 반드시 체중이 적은 학생부터 출력한다.
select 이름,학년,주소,몸무게
from 학생
where 학년 = 1
order by 몸무게;

#1학년 학생의 이름,학년,키,몸무게 데이터를 검색하라.단, 키 내림차순으로 정렬하고, 같은 키는 몸무게 오름차순으로 정렬한다.
select 이름,학년,키,몸무게
from 학생
where 학년 = 1
order by 키 desc, 몸무게 asc;

#학생 테이블에서 '문주원'학생과 학년이 동일한 모든 학생의 이름과 키, 몸무게를 검색하라.
select 이름,키,몸무게
from 학생
where 학년 = (select 학년
            from 학생
            where 이름 = '문주원');

#1번 학과 학생들의 평균 키보다 작은 학생의 이름,학년,키를 검색하라
select 이름,학년,키
from 학생
where 키 < (select avg(키)
            from 학생
            where 학과번호 = 1);

#'김태희'학생과 학년이 같고, '김태희'학생(키)보다 큰 학생의 이름,학년,키를 검색하라

select 이름,학년,키
from 학생
where 학년 = (select 학년
            from 학생
            where 이름 = '김태희')
and 키 > (select 키
         from 학생
         where 이름 = '김태희');

#키가 165인 학생의 번호,이름,키를 검색하라.
select 번호,이름,키
from 학생
where 키 = 165;

#학생의 수를 검색하라. 단, 출력 결과 열은 학생수로 표시한다.
select count(번호) as 학생_수
from 학생;

#박씨 성을 가진 학생중에서 몸무게 정보가 있는 학생의 수를 검색하라. 단, 출력 결과 열은 '몸무게 정보가 있는 학생수'로 표시한다.
select count(이름) as 몸무게_정보있는학생의수
from 학생
where 이름 like '%박%'
and 몸무게 is not null;

#과목번호가 1인 과목의 평균 점수를 검색하라.

select avg(점수) as 평균점수
from 수강내역
where 과목번호 = 1;

#과목별 평균 점수를 검색하라.단, 두 번째 출력 결과 열은 '과목평균점수'로 표시한다.

select 과목번호, avg(점수) as 과목평균점수
from 수강내역
group by 과목번호;

#전체 학생을 소속 학과별로 나누고, 같은 학과 학생은 다시 학년별로 그룹핑한후, 학과별 인원수, 평균키를 검색하라.
#단, 세 번째 출력 결과 열은 '원원수'로 표시하고, 네 번째 열은 '평균키'로 표시한다.

select *
from 학생;

select 학과번호, 학년, count(학년) as 인원수, avg(키) as 평균키
from 학생
group by 학과번호, 학년
order by 학년;

#누적학생 수가 네 명 이상인 과목의 평균 점수를 검색하라. 단, 두 번째 출력 결과열은 '누적학생수'로 표시하고, 세 번째 열은 '과목평균점수'로 표시한다.
select 과목번호, count(과목번호) as 누적학생수, avg(점수) as 과목평균점수
from 수강내역
group by 과목번호;

#학생들의 학번,이름,소속학과 이름을 검색하라.
SELECT 학생.번호, 학생.이름, 학과.이름 FROM 학생
INNER JOIN 학과
    ON 학생.학과번호 = 학과.번호
group by 학생.번호;

#교수의 번호,이름,소속 학과 이름을 검색하라.
select 교수.번호, 교수.이름, 학과.이름
from 교수
inner join 학과
on 교수.학과번호 = 학과.번호;

#'김이향'학생의 번호,이름,소속 학과 이름을 검색하라.
select 학생.번호, 학생.이름, 학과.이름
from 학생
inner join 학과
on 학생.학과번호 = 학과.번호
where 학생.이름 = '김이향';

#키가 180이상인 학생의 번호, 이름, 키, 소속 학과 이름을 검색하라.
select 학생.번호, 학생.이름, 학생.키, 학과.이름
from 학생
inner join 학과
on 학생.학과번호 = 학과.번호
where 학생.키 >=180;


#학과별 교수별 개설 과목 목록 정보인 학과 이름, 교수 이름, 과목 이름을 검색하라.
select a.이름, b.이름, c.이름
from 학과 as a, 교수 as b, 과목 as c
where a.번호 = b.학과번호
and b.번호 = c.교수번호;

####inner join 사용####
select 학과.이름, 교수.이름, 과목.이름
from 학과
inner join 교수 on 학과.번호 = 교수.학과번호
inner join 과목 on 교수.번호 = 과목.교수번호;

#학과별 개설 과목 목록 정보인 학과 이름, 과목 이름을 검색하라.

select 학과.이름, 과목.이름
from 학과
inner join 교수 on 학과.번호 = 교수.학과번호
inner join 과목 on 교수.번호 = 과목.교수번호;
